// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ChannelsJoinChannelRequest represents TL type `channels.joinChannel#24b524c5`.
type ChannelsJoinChannelRequest struct {
	// Channel field of ChannelsJoinChannelRequest.
	Channel InputChannelClass
}

// ChannelsJoinChannelRequestTypeID is TL type id of ChannelsJoinChannelRequest.
const ChannelsJoinChannelRequestTypeID = 0x24b524c5

// Ensuring interfaces in compile-time for ChannelsJoinChannelRequest.
var (
	_ bin.Encoder     = &ChannelsJoinChannelRequest{}
	_ bin.Decoder     = &ChannelsJoinChannelRequest{}
	_ bin.BareEncoder = &ChannelsJoinChannelRequest{}
	_ bin.BareDecoder = &ChannelsJoinChannelRequest{}
)

func (j *ChannelsJoinChannelRequest) Zero() bool {
	if j == nil {
		return true
	}
	if !(j.Channel == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (j *ChannelsJoinChannelRequest) String() string {
	if j == nil {
		return "ChannelsJoinChannelRequest(nil)"
	}
	type Alias ChannelsJoinChannelRequest
	return fmt.Sprintf("ChannelsJoinChannelRequest%+v", Alias(*j))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChannelsJoinChannelRequest) TypeID() uint32 {
	return ChannelsJoinChannelRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ChannelsJoinChannelRequest) TypeName() string {
	return "channels.joinChannel"
}

// TypeInfo returns info about TL type.
func (j *ChannelsJoinChannelRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "channels.joinChannel",
		ID:   ChannelsJoinChannelRequestTypeID,
	}
	if j == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Channel",
			SchemaName: "channel",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (j *ChannelsJoinChannelRequest) Encode(b *bin.Buffer) error {
	if j == nil {
		return fmt.Errorf("can't encode channels.joinChannel#24b524c5 as nil")
	}
	b.PutID(ChannelsJoinChannelRequestTypeID)
	return j.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (j *ChannelsJoinChannelRequest) EncodeBare(b *bin.Buffer) error {
	if j == nil {
		return fmt.Errorf("can't encode channels.joinChannel#24b524c5 as nil")
	}
	if j.Channel == nil {
		return fmt.Errorf("unable to encode channels.joinChannel#24b524c5: field channel is nil")
	}
	if err := j.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.joinChannel#24b524c5: field channel: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (j *ChannelsJoinChannelRequest) Decode(b *bin.Buffer) error {
	if j == nil {
		return fmt.Errorf("can't decode channels.joinChannel#24b524c5 to nil")
	}
	if err := b.ConsumeID(ChannelsJoinChannelRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.joinChannel#24b524c5: %w", err)
	}
	return j.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (j *ChannelsJoinChannelRequest) DecodeBare(b *bin.Buffer) error {
	if j == nil {
		return fmt.Errorf("can't decode channels.joinChannel#24b524c5 to nil")
	}
	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.joinChannel#24b524c5: field channel: %w", err)
		}
		j.Channel = value
	}
	return nil
}

// GetChannel returns value of Channel field.
func (j *ChannelsJoinChannelRequest) GetChannel() (value InputChannelClass) {
	if j == nil {
		return
	}
	return j.Channel
}

// ChannelsJoinChannel invokes method channels.joinChannel#24b524c5 returning error if any.
func (c *Client) ChannelsJoinChannel(ctx context.Context, channel InputChannelClass) (UpdatesClass, error) {
	var result UpdatesBox

	request := &ChannelsJoinChannelRequest{
		Channel: channel,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
