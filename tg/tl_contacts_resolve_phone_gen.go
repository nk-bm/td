// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ContactsResolvePhoneRequest represents TL type `contacts.resolvePhone#8af94344`.
type ContactsResolvePhoneRequest struct {
	// Phone field of ContactsResolvePhoneRequest.
	Phone string
}

// ContactsResolvePhoneRequestTypeID is TL type id of ContactsResolvePhoneRequest.
const ContactsResolvePhoneRequestTypeID = 0x8af94344

// Ensuring interfaces in compile-time for ContactsResolvePhoneRequest.
var (
	_ bin.Encoder     = &ContactsResolvePhoneRequest{}
	_ bin.Decoder     = &ContactsResolvePhoneRequest{}
	_ bin.BareEncoder = &ContactsResolvePhoneRequest{}
	_ bin.BareDecoder = &ContactsResolvePhoneRequest{}
)

func (r *ContactsResolvePhoneRequest) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.Phone == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *ContactsResolvePhoneRequest) String() string {
	if r == nil {
		return "ContactsResolvePhoneRequest(nil)"
	}
	type Alias ContactsResolvePhoneRequest
	return fmt.Sprintf("ContactsResolvePhoneRequest%+v", Alias(*r))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ContactsResolvePhoneRequest) TypeID() uint32 {
	return ContactsResolvePhoneRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ContactsResolvePhoneRequest) TypeName() string {
	return "contacts.resolvePhone"
}

// TypeInfo returns info about TL type.
func (r *ContactsResolvePhoneRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "contacts.resolvePhone",
		ID:   ContactsResolvePhoneRequestTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Phone",
			SchemaName: "phone",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (r *ContactsResolvePhoneRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode contacts.resolvePhone#8af94344 as nil")
	}
	b.PutID(ContactsResolvePhoneRequestTypeID)
	return r.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (r *ContactsResolvePhoneRequest) EncodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode contacts.resolvePhone#8af94344 as nil")
	}
	b.PutString(r.Phone)
	return nil
}

// Decode implements bin.Decoder.
func (r *ContactsResolvePhoneRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode contacts.resolvePhone#8af94344 to nil")
	}
	if err := b.ConsumeID(ContactsResolvePhoneRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode contacts.resolvePhone#8af94344: %w", err)
	}
	return r.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (r *ContactsResolvePhoneRequest) DecodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode contacts.resolvePhone#8af94344 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode contacts.resolvePhone#8af94344: field phone: %w", err)
		}
		r.Phone = value
	}
	return nil
}

// GetPhone returns value of Phone field.
func (r *ContactsResolvePhoneRequest) GetPhone() (value string) {
	if r == nil {
		return
	}
	return r.Phone
}

// ContactsResolvePhone invokes method contacts.resolvePhone#8af94344 returning error if any.
func (c *Client) ContactsResolvePhone(ctx context.Context, phone string) (*ContactsResolvedPeer, error) {
	var result ContactsResolvedPeer

	request := &ContactsResolvePhoneRequest{
		Phone: phone,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
