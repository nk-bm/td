// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessagesTranscribedAudio represents TL type `messages.transcribedAudio#cfb9d957`.
type MessagesTranscribedAudio struct {
	// Flags field of MessagesTranscribedAudio.
	Flags bin.Fields
	// Pending field of MessagesTranscribedAudio.
	Pending bool
	// TranscriptionID field of MessagesTranscribedAudio.
	TranscriptionID int64
	// Text field of MessagesTranscribedAudio.
	Text string
	// TrialRemainsNum field of MessagesTranscribedAudio.
	//
	// Use SetTrialRemainsNum and GetTrialRemainsNum helpers.
	TrialRemainsNum int
	// TrialRemainsUntilDate field of MessagesTranscribedAudio.
	//
	// Use SetTrialRemainsUntilDate and GetTrialRemainsUntilDate helpers.
	TrialRemainsUntilDate int
}

// MessagesTranscribedAudioTypeID is TL type id of MessagesTranscribedAudio.
const MessagesTranscribedAudioTypeID = 0xcfb9d957

// Ensuring interfaces in compile-time for MessagesTranscribedAudio.
var (
	_ bin.Encoder     = &MessagesTranscribedAudio{}
	_ bin.Decoder     = &MessagesTranscribedAudio{}
	_ bin.BareEncoder = &MessagesTranscribedAudio{}
	_ bin.BareDecoder = &MessagesTranscribedAudio{}
)

func (t *MessagesTranscribedAudio) Zero() bool {
	if t == nil {
		return true
	}
	if !(t.Flags.Zero()) {
		return false
	}
	if !(t.Pending == false) {
		return false
	}
	if !(t.TranscriptionID == 0) {
		return false
	}
	if !(t.Text == "") {
		return false
	}
	if !(t.TrialRemainsNum == 0) {
		return false
	}
	if !(t.TrialRemainsUntilDate == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (t *MessagesTranscribedAudio) String() string {
	if t == nil {
		return "MessagesTranscribedAudio(nil)"
	}
	type Alias MessagesTranscribedAudio
	return fmt.Sprintf("MessagesTranscribedAudio%+v", Alias(*t))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesTranscribedAudio) TypeID() uint32 {
	return MessagesTranscribedAudioTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesTranscribedAudio) TypeName() string {
	return "messages.transcribedAudio"
}

// TypeInfo returns info about TL type.
func (t *MessagesTranscribedAudio) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.transcribedAudio",
		ID:   MessagesTranscribedAudioTypeID,
	}
	if t == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Pending",
			SchemaName: "pending",
			Null:       !t.Flags.Has(0),
		},
		{
			Name:       "TranscriptionID",
			SchemaName: "transcription_id",
		},
		{
			Name:       "Text",
			SchemaName: "text",
		},
		{
			Name:       "TrialRemainsNum",
			SchemaName: "trial_remains_num",
			Null:       !t.Flags.Has(1),
		},
		{
			Name:       "TrialRemainsUntilDate",
			SchemaName: "trial_remains_until_date",
			Null:       !t.Flags.Has(1),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (t *MessagesTranscribedAudio) SetFlags() {
	if !(t.Pending == false) {
		t.Flags.Set(0)
	}
	if !(t.TrialRemainsNum == 0) {
		t.Flags.Set(1)
	}
	if !(t.TrialRemainsUntilDate == 0) {
		t.Flags.Set(1)
	}
}

// Encode implements bin.Encoder.
func (t *MessagesTranscribedAudio) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode messages.transcribedAudio#cfb9d957 as nil")
	}
	b.PutID(MessagesTranscribedAudioTypeID)
	return t.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (t *MessagesTranscribedAudio) EncodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode messages.transcribedAudio#cfb9d957 as nil")
	}
	t.SetFlags()
	if err := t.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.transcribedAudio#cfb9d957: field flags: %w", err)
	}
	b.PutLong(t.TranscriptionID)
	b.PutString(t.Text)
	if t.Flags.Has(1) {
		b.PutInt(t.TrialRemainsNum)
	}
	if t.Flags.Has(1) {
		b.PutInt(t.TrialRemainsUntilDate)
	}
	return nil
}

// Decode implements bin.Decoder.
func (t *MessagesTranscribedAudio) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode messages.transcribedAudio#cfb9d957 to nil")
	}
	if err := b.ConsumeID(MessagesTranscribedAudioTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.transcribedAudio#cfb9d957: %w", err)
	}
	return t.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (t *MessagesTranscribedAudio) DecodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode messages.transcribedAudio#cfb9d957 to nil")
	}
	{
		if err := t.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.transcribedAudio#cfb9d957: field flags: %w", err)
		}
	}
	t.Pending = t.Flags.Has(0)
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode messages.transcribedAudio#cfb9d957: field transcription_id: %w", err)
		}
		t.TranscriptionID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messages.transcribedAudio#cfb9d957: field text: %w", err)
		}
		t.Text = value
	}
	if t.Flags.Has(1) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.transcribedAudio#cfb9d957: field trial_remains_num: %w", err)
		}
		t.TrialRemainsNum = value
	}
	if t.Flags.Has(1) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.transcribedAudio#cfb9d957: field trial_remains_until_date: %w", err)
		}
		t.TrialRemainsUntilDate = value
	}
	return nil
}

// SetPending sets value of Pending conditional field.
func (t *MessagesTranscribedAudio) SetPending(value bool) {
	if value {
		t.Flags.Set(0)
		t.Pending = true
	} else {
		t.Flags.Unset(0)
		t.Pending = false
	}
}

// GetPending returns value of Pending conditional field.
func (t *MessagesTranscribedAudio) GetPending() (value bool) {
	if t == nil {
		return
	}
	return t.Flags.Has(0)
}

// GetTranscriptionID returns value of TranscriptionID field.
func (t *MessagesTranscribedAudio) GetTranscriptionID() (value int64) {
	if t == nil {
		return
	}
	return t.TranscriptionID
}

// GetText returns value of Text field.
func (t *MessagesTranscribedAudio) GetText() (value string) {
	if t == nil {
		return
	}
	return t.Text
}

// SetTrialRemainsNum sets value of TrialRemainsNum conditional field.
func (t *MessagesTranscribedAudio) SetTrialRemainsNum(value int) {
	t.Flags.Set(1)
	t.TrialRemainsNum = value
}

// GetTrialRemainsNum returns value of TrialRemainsNum conditional field and
// boolean which is true if field was set.
func (t *MessagesTranscribedAudio) GetTrialRemainsNum() (value int, ok bool) {
	if t == nil {
		return
	}
	if !t.Flags.Has(1) {
		return value, false
	}
	return t.TrialRemainsNum, true
}

// SetTrialRemainsUntilDate sets value of TrialRemainsUntilDate conditional field.
func (t *MessagesTranscribedAudio) SetTrialRemainsUntilDate(value int) {
	t.Flags.Set(1)
	t.TrialRemainsUntilDate = value
}

// GetTrialRemainsUntilDate returns value of TrialRemainsUntilDate conditional field and
// boolean which is true if field was set.
func (t *MessagesTranscribedAudio) GetTrialRemainsUntilDate() (value int, ok bool) {
	if t == nil {
		return
	}
	if !t.Flags.Has(1) {
		return value, false
	}
	return t.TrialRemainsUntilDate, true
}
