// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessagesForwardMessagesRequest represents TL type `messages.forwardMessages#d5039208`.
type MessagesForwardMessagesRequest struct {
	// Flags field of MessagesForwardMessagesRequest.
	Flags bin.Fields
	// Silent field of MessagesForwardMessagesRequest.
	Silent bool
	// Background field of MessagesForwardMessagesRequest.
	Background bool
	// WithMyScore field of MessagesForwardMessagesRequest.
	WithMyScore bool
	// DropAuthor field of MessagesForwardMessagesRequest.
	DropAuthor bool
	// DropMediaCaptions field of MessagesForwardMessagesRequest.
	DropMediaCaptions bool
	// Noforwards field of MessagesForwardMessagesRequest.
	Noforwards bool
	// AllowPaidFloodskip field of MessagesForwardMessagesRequest.
	AllowPaidFloodskip bool
	// FromPeer field of MessagesForwardMessagesRequest.
	FromPeer InputPeerClass
	// ID field of MessagesForwardMessagesRequest.
	ID []int
	// RandomID field of MessagesForwardMessagesRequest.
	RandomID []int64
	// ToPeer field of MessagesForwardMessagesRequest.
	ToPeer InputPeerClass
	// TopMsgID field of MessagesForwardMessagesRequest.
	//
	// Use SetTopMsgID and GetTopMsgID helpers.
	TopMsgID int
	// ScheduleDate field of MessagesForwardMessagesRequest.
	//
	// Use SetScheduleDate and GetScheduleDate helpers.
	ScheduleDate int
	// SendAs field of MessagesForwardMessagesRequest.
	//
	// Use SetSendAs and GetSendAs helpers.
	SendAs InputPeerClass
	// QuickReplyShortcut field of MessagesForwardMessagesRequest.
	//
	// Use SetQuickReplyShortcut and GetQuickReplyShortcut helpers.
	QuickReplyShortcut InputQuickReplyShortcutClass
}

// MessagesForwardMessagesRequestTypeID is TL type id of MessagesForwardMessagesRequest.
const MessagesForwardMessagesRequestTypeID = 0xd5039208

// Ensuring interfaces in compile-time for MessagesForwardMessagesRequest.
var (
	_ bin.Encoder     = &MessagesForwardMessagesRequest{}
	_ bin.Decoder     = &MessagesForwardMessagesRequest{}
	_ bin.BareEncoder = &MessagesForwardMessagesRequest{}
	_ bin.BareDecoder = &MessagesForwardMessagesRequest{}
)

func (f *MessagesForwardMessagesRequest) Zero() bool {
	if f == nil {
		return true
	}
	if !(f.Flags.Zero()) {
		return false
	}
	if !(f.Silent == false) {
		return false
	}
	if !(f.Background == false) {
		return false
	}
	if !(f.WithMyScore == false) {
		return false
	}
	if !(f.DropAuthor == false) {
		return false
	}
	if !(f.DropMediaCaptions == false) {
		return false
	}
	if !(f.Noforwards == false) {
		return false
	}
	if !(f.AllowPaidFloodskip == false) {
		return false
	}
	if !(f.FromPeer == nil) {
		return false
	}
	if !(f.ID == nil) {
		return false
	}
	if !(f.RandomID == nil) {
		return false
	}
	if !(f.ToPeer == nil) {
		return false
	}
	if !(f.TopMsgID == 0) {
		return false
	}
	if !(f.ScheduleDate == 0) {
		return false
	}
	if !(f.SendAs == nil) {
		return false
	}
	if !(f.QuickReplyShortcut == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (f *MessagesForwardMessagesRequest) String() string {
	if f == nil {
		return "MessagesForwardMessagesRequest(nil)"
	}
	type Alias MessagesForwardMessagesRequest
	return fmt.Sprintf("MessagesForwardMessagesRequest%+v", Alias(*f))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesForwardMessagesRequest) TypeID() uint32 {
	return MessagesForwardMessagesRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesForwardMessagesRequest) TypeName() string {
	return "messages.forwardMessages"
}

// TypeInfo returns info about TL type.
func (f *MessagesForwardMessagesRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.forwardMessages",
		ID:   MessagesForwardMessagesRequestTypeID,
	}
	if f == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Silent",
			SchemaName: "silent",
			Null:       !f.Flags.Has(5),
		},
		{
			Name:       "Background",
			SchemaName: "background",
			Null:       !f.Flags.Has(6),
		},
		{
			Name:       "WithMyScore",
			SchemaName: "with_my_score",
			Null:       !f.Flags.Has(8),
		},
		{
			Name:       "DropAuthor",
			SchemaName: "drop_author",
			Null:       !f.Flags.Has(11),
		},
		{
			Name:       "DropMediaCaptions",
			SchemaName: "drop_media_captions",
			Null:       !f.Flags.Has(12),
		},
		{
			Name:       "Noforwards",
			SchemaName: "noforwards",
			Null:       !f.Flags.Has(14),
		},
		{
			Name:       "AllowPaidFloodskip",
			SchemaName: "allow_paid_floodskip",
			Null:       !f.Flags.Has(19),
		},
		{
			Name:       "FromPeer",
			SchemaName: "from_peer",
		},
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "RandomID",
			SchemaName: "random_id",
		},
		{
			Name:       "ToPeer",
			SchemaName: "to_peer",
		},
		{
			Name:       "TopMsgID",
			SchemaName: "top_msg_id",
			Null:       !f.Flags.Has(9),
		},
		{
			Name:       "ScheduleDate",
			SchemaName: "schedule_date",
			Null:       !f.Flags.Has(10),
		},
		{
			Name:       "SendAs",
			SchemaName: "send_as",
			Null:       !f.Flags.Has(13),
		},
		{
			Name:       "QuickReplyShortcut",
			SchemaName: "quick_reply_shortcut",
			Null:       !f.Flags.Has(17),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (f *MessagesForwardMessagesRequest) SetFlags() {
	if !(f.Silent == false) {
		f.Flags.Set(5)
	}
	if !(f.Background == false) {
		f.Flags.Set(6)
	}
	if !(f.WithMyScore == false) {
		f.Flags.Set(8)
	}
	if !(f.DropAuthor == false) {
		f.Flags.Set(11)
	}
	if !(f.DropMediaCaptions == false) {
		f.Flags.Set(12)
	}
	if !(f.Noforwards == false) {
		f.Flags.Set(14)
	}
	if !(f.AllowPaidFloodskip == false) {
		f.Flags.Set(19)
	}
	if !(f.TopMsgID == 0) {
		f.Flags.Set(9)
	}
	if !(f.ScheduleDate == 0) {
		f.Flags.Set(10)
	}
	if !(f.SendAs == nil) {
		f.Flags.Set(13)
	}
	if !(f.QuickReplyShortcut == nil) {
		f.Flags.Set(17)
	}
}

// Encode implements bin.Encoder.
func (f *MessagesForwardMessagesRequest) Encode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode messages.forwardMessages#d5039208 as nil")
	}
	b.PutID(MessagesForwardMessagesRequestTypeID)
	return f.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (f *MessagesForwardMessagesRequest) EncodeBare(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode messages.forwardMessages#d5039208 as nil")
	}
	f.SetFlags()
	if err := f.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.forwardMessages#d5039208: field flags: %w", err)
	}
	if f.FromPeer == nil {
		return fmt.Errorf("unable to encode messages.forwardMessages#d5039208: field from_peer is nil")
	}
	if err := f.FromPeer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.forwardMessages#d5039208: field from_peer: %w", err)
	}
	b.PutVectorHeader(len(f.ID))
	for _, v := range f.ID {
		b.PutInt(v)
	}
	b.PutVectorHeader(len(f.RandomID))
	for _, v := range f.RandomID {
		b.PutLong(v)
	}
	if f.ToPeer == nil {
		return fmt.Errorf("unable to encode messages.forwardMessages#d5039208: field to_peer is nil")
	}
	if err := f.ToPeer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.forwardMessages#d5039208: field to_peer: %w", err)
	}
	if f.Flags.Has(9) {
		b.PutInt(f.TopMsgID)
	}
	if f.Flags.Has(10) {
		b.PutInt(f.ScheduleDate)
	}
	if f.Flags.Has(13) {
		if f.SendAs == nil {
			return fmt.Errorf("unable to encode messages.forwardMessages#d5039208: field send_as is nil")
		}
		if err := f.SendAs.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.forwardMessages#d5039208: field send_as: %w", err)
		}
	}
	if f.Flags.Has(17) {
		if f.QuickReplyShortcut == nil {
			return fmt.Errorf("unable to encode messages.forwardMessages#d5039208: field quick_reply_shortcut is nil")
		}
		if err := f.QuickReplyShortcut.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.forwardMessages#d5039208: field quick_reply_shortcut: %w", err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (f *MessagesForwardMessagesRequest) Decode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode messages.forwardMessages#d5039208 to nil")
	}
	if err := b.ConsumeID(MessagesForwardMessagesRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: %w", err)
	}
	return f.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (f *MessagesForwardMessagesRequest) DecodeBare(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode messages.forwardMessages#d5039208 to nil")
	}
	{
		if err := f.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: field flags: %w", err)
		}
	}
	f.Silent = f.Flags.Has(5)
	f.Background = f.Flags.Has(6)
	f.WithMyScore = f.Flags.Has(8)
	f.DropAuthor = f.Flags.Has(11)
	f.DropMediaCaptions = f.Flags.Has(12)
	f.Noforwards = f.Flags.Has(14)
	f.AllowPaidFloodskip = f.Flags.Has(19)
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: field from_peer: %w", err)
		}
		f.FromPeer = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: field id: %w", err)
		}

		if headerLen > 0 {
			f.ID = make([]int, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: field id: %w", err)
			}
			f.ID = append(f.ID, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: field random_id: %w", err)
		}

		if headerLen > 0 {
			f.RandomID = make([]int64, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: field random_id: %w", err)
			}
			f.RandomID = append(f.RandomID, value)
		}
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: field to_peer: %w", err)
		}
		f.ToPeer = value
	}
	if f.Flags.Has(9) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: field top_msg_id: %w", err)
		}
		f.TopMsgID = value
	}
	if f.Flags.Has(10) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: field schedule_date: %w", err)
		}
		f.ScheduleDate = value
	}
	if f.Flags.Has(13) {
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: field send_as: %w", err)
		}
		f.SendAs = value
	}
	if f.Flags.Has(17) {
		value, err := DecodeInputQuickReplyShortcut(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.forwardMessages#d5039208: field quick_reply_shortcut: %w", err)
		}
		f.QuickReplyShortcut = value
	}
	return nil
}

// SetSilent sets value of Silent conditional field.
func (f *MessagesForwardMessagesRequest) SetSilent(value bool) {
	if value {
		f.Flags.Set(5)
		f.Silent = true
	} else {
		f.Flags.Unset(5)
		f.Silent = false
	}
}

// GetSilent returns value of Silent conditional field.
func (f *MessagesForwardMessagesRequest) GetSilent() (value bool) {
	if f == nil {
		return
	}
	return f.Flags.Has(5)
}

// SetBackground sets value of Background conditional field.
func (f *MessagesForwardMessagesRequest) SetBackground(value bool) {
	if value {
		f.Flags.Set(6)
		f.Background = true
	} else {
		f.Flags.Unset(6)
		f.Background = false
	}
}

// GetBackground returns value of Background conditional field.
func (f *MessagesForwardMessagesRequest) GetBackground() (value bool) {
	if f == nil {
		return
	}
	return f.Flags.Has(6)
}

// SetWithMyScore sets value of WithMyScore conditional field.
func (f *MessagesForwardMessagesRequest) SetWithMyScore(value bool) {
	if value {
		f.Flags.Set(8)
		f.WithMyScore = true
	} else {
		f.Flags.Unset(8)
		f.WithMyScore = false
	}
}

// GetWithMyScore returns value of WithMyScore conditional field.
func (f *MessagesForwardMessagesRequest) GetWithMyScore() (value bool) {
	if f == nil {
		return
	}
	return f.Flags.Has(8)
}

// SetDropAuthor sets value of DropAuthor conditional field.
func (f *MessagesForwardMessagesRequest) SetDropAuthor(value bool) {
	if value {
		f.Flags.Set(11)
		f.DropAuthor = true
	} else {
		f.Flags.Unset(11)
		f.DropAuthor = false
	}
}

// GetDropAuthor returns value of DropAuthor conditional field.
func (f *MessagesForwardMessagesRequest) GetDropAuthor() (value bool) {
	if f == nil {
		return
	}
	return f.Flags.Has(11)
}

// SetDropMediaCaptions sets value of DropMediaCaptions conditional field.
func (f *MessagesForwardMessagesRequest) SetDropMediaCaptions(value bool) {
	if value {
		f.Flags.Set(12)
		f.DropMediaCaptions = true
	} else {
		f.Flags.Unset(12)
		f.DropMediaCaptions = false
	}
}

// GetDropMediaCaptions returns value of DropMediaCaptions conditional field.
func (f *MessagesForwardMessagesRequest) GetDropMediaCaptions() (value bool) {
	if f == nil {
		return
	}
	return f.Flags.Has(12)
}

// SetNoforwards sets value of Noforwards conditional field.
func (f *MessagesForwardMessagesRequest) SetNoforwards(value bool) {
	if value {
		f.Flags.Set(14)
		f.Noforwards = true
	} else {
		f.Flags.Unset(14)
		f.Noforwards = false
	}
}

// GetNoforwards returns value of Noforwards conditional field.
func (f *MessagesForwardMessagesRequest) GetNoforwards() (value bool) {
	if f == nil {
		return
	}
	return f.Flags.Has(14)
}

// SetAllowPaidFloodskip sets value of AllowPaidFloodskip conditional field.
func (f *MessagesForwardMessagesRequest) SetAllowPaidFloodskip(value bool) {
	if value {
		f.Flags.Set(19)
		f.AllowPaidFloodskip = true
	} else {
		f.Flags.Unset(19)
		f.AllowPaidFloodskip = false
	}
}

// GetAllowPaidFloodskip returns value of AllowPaidFloodskip conditional field.
func (f *MessagesForwardMessagesRequest) GetAllowPaidFloodskip() (value bool) {
	if f == nil {
		return
	}
	return f.Flags.Has(19)
}

// GetFromPeer returns value of FromPeer field.
func (f *MessagesForwardMessagesRequest) GetFromPeer() (value InputPeerClass) {
	if f == nil {
		return
	}
	return f.FromPeer
}

// GetID returns value of ID field.
func (f *MessagesForwardMessagesRequest) GetID() (value []int) {
	if f == nil {
		return
	}
	return f.ID
}

// GetRandomID returns value of RandomID field.
func (f *MessagesForwardMessagesRequest) GetRandomID() (value []int64) {
	if f == nil {
		return
	}
	return f.RandomID
}

// GetToPeer returns value of ToPeer field.
func (f *MessagesForwardMessagesRequest) GetToPeer() (value InputPeerClass) {
	if f == nil {
		return
	}
	return f.ToPeer
}

// SetTopMsgID sets value of TopMsgID conditional field.
func (f *MessagesForwardMessagesRequest) SetTopMsgID(value int) {
	f.Flags.Set(9)
	f.TopMsgID = value
}

// GetTopMsgID returns value of TopMsgID conditional field and
// boolean which is true if field was set.
func (f *MessagesForwardMessagesRequest) GetTopMsgID() (value int, ok bool) {
	if f == nil {
		return
	}
	if !f.Flags.Has(9) {
		return value, false
	}
	return f.TopMsgID, true
}

// SetScheduleDate sets value of ScheduleDate conditional field.
func (f *MessagesForwardMessagesRequest) SetScheduleDate(value int) {
	f.Flags.Set(10)
	f.ScheduleDate = value
}

// GetScheduleDate returns value of ScheduleDate conditional field and
// boolean which is true if field was set.
func (f *MessagesForwardMessagesRequest) GetScheduleDate() (value int, ok bool) {
	if f == nil {
		return
	}
	if !f.Flags.Has(10) {
		return value, false
	}
	return f.ScheduleDate, true
}

// SetSendAs sets value of SendAs conditional field.
func (f *MessagesForwardMessagesRequest) SetSendAs(value InputPeerClass) {
	f.Flags.Set(13)
	f.SendAs = value
}

// GetSendAs returns value of SendAs conditional field and
// boolean which is true if field was set.
func (f *MessagesForwardMessagesRequest) GetSendAs() (value InputPeerClass, ok bool) {
	if f == nil {
		return
	}
	if !f.Flags.Has(13) {
		return value, false
	}
	return f.SendAs, true
}

// SetQuickReplyShortcut sets value of QuickReplyShortcut conditional field.
func (f *MessagesForwardMessagesRequest) SetQuickReplyShortcut(value InputQuickReplyShortcutClass) {
	f.Flags.Set(17)
	f.QuickReplyShortcut = value
}

// GetQuickReplyShortcut returns value of QuickReplyShortcut conditional field and
// boolean which is true if field was set.
func (f *MessagesForwardMessagesRequest) GetQuickReplyShortcut() (value InputQuickReplyShortcutClass, ok bool) {
	if f == nil {
		return
	}
	if !f.Flags.Has(17) {
		return value, false
	}
	return f.QuickReplyShortcut, true
}

// MessagesForwardMessages invokes method messages.forwardMessages#d5039208 returning error if any.
func (c *Client) MessagesForwardMessages(ctx context.Context, request *MessagesForwardMessagesRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
