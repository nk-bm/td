// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ChannelsLeaveChannelRequest represents TL type `channels.leaveChannel#f836aa95`.
type ChannelsLeaveChannelRequest struct {
	// Channel field of ChannelsLeaveChannelRequest.
	Channel InputChannelClass
}

// ChannelsLeaveChannelRequestTypeID is TL type id of ChannelsLeaveChannelRequest.
const ChannelsLeaveChannelRequestTypeID = 0xf836aa95

// Ensuring interfaces in compile-time for ChannelsLeaveChannelRequest.
var (
	_ bin.Encoder     = &ChannelsLeaveChannelRequest{}
	_ bin.Decoder     = &ChannelsLeaveChannelRequest{}
	_ bin.BareEncoder = &ChannelsLeaveChannelRequest{}
	_ bin.BareDecoder = &ChannelsLeaveChannelRequest{}
)

func (l *ChannelsLeaveChannelRequest) Zero() bool {
	if l == nil {
		return true
	}
	if !(l.Channel == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (l *ChannelsLeaveChannelRequest) String() string {
	if l == nil {
		return "ChannelsLeaveChannelRequest(nil)"
	}
	type Alias ChannelsLeaveChannelRequest
	return fmt.Sprintf("ChannelsLeaveChannelRequest%+v", Alias(*l))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChannelsLeaveChannelRequest) TypeID() uint32 {
	return ChannelsLeaveChannelRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ChannelsLeaveChannelRequest) TypeName() string {
	return "channels.leaveChannel"
}

// TypeInfo returns info about TL type.
func (l *ChannelsLeaveChannelRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "channels.leaveChannel",
		ID:   ChannelsLeaveChannelRequestTypeID,
	}
	if l == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Channel",
			SchemaName: "channel",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (l *ChannelsLeaveChannelRequest) Encode(b *bin.Buffer) error {
	if l == nil {
		return fmt.Errorf("can't encode channels.leaveChannel#f836aa95 as nil")
	}
	b.PutID(ChannelsLeaveChannelRequestTypeID)
	return l.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (l *ChannelsLeaveChannelRequest) EncodeBare(b *bin.Buffer) error {
	if l == nil {
		return fmt.Errorf("can't encode channels.leaveChannel#f836aa95 as nil")
	}
	if l.Channel == nil {
		return fmt.Errorf("unable to encode channels.leaveChannel#f836aa95: field channel is nil")
	}
	if err := l.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.leaveChannel#f836aa95: field channel: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (l *ChannelsLeaveChannelRequest) Decode(b *bin.Buffer) error {
	if l == nil {
		return fmt.Errorf("can't decode channels.leaveChannel#f836aa95 to nil")
	}
	if err := b.ConsumeID(ChannelsLeaveChannelRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.leaveChannel#f836aa95: %w", err)
	}
	return l.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (l *ChannelsLeaveChannelRequest) DecodeBare(b *bin.Buffer) error {
	if l == nil {
		return fmt.Errorf("can't decode channels.leaveChannel#f836aa95 to nil")
	}
	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.leaveChannel#f836aa95: field channel: %w", err)
		}
		l.Channel = value
	}
	return nil
}

// GetChannel returns value of Channel field.
func (l *ChannelsLeaveChannelRequest) GetChannel() (value InputChannelClass) {
	if l == nil {
		return
	}
	return l.Channel
}

// ChannelsLeaveChannel invokes method channels.leaveChannel#f836aa95 returning error if any.
func (c *Client) ChannelsLeaveChannel(ctx context.Context, channel InputChannelClass) (UpdatesClass, error) {
	var result UpdatesBox

	request := &ChannelsLeaveChannelRequest{
		Channel: channel,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
